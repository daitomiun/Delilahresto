openapi: 3.0.0

info:
  title: Delilah Resto
  description: API para pedidos de comida deliciosa. Como cliente, podras registrarte, ver el listado de nuestros productos y realizar una orden. Los administradores del restaurante tienen la posibilidad de recibir pedidos y actualizarlos.
  version: 1.0.0
  contact:
    name: Brigite Romero / mateo rodriguez
    email: mateo.rodriguez.fierro@gmail.com 
    

servers:
  - url: http://localhost
    description: ServidorLocal
    variables:
      port:
        default: '3006'
  - url: https://delilahresto.com
    description: produccion
  - url: https://dev.delilahResto.com
    description: staging
tags:
  - name: Pedidos
    description: Endpoints para el manejo de los pedidos.
  - name: Platos
    description: Endpoints para el manejo de los platos.
  - name: Usuarios
    description: Endpoints para el manejo de información de clientes y administradores.

paths:
  /auth/login:
    post:
      tags:
        - Usuarios
      summary: Login de usuarios.
      description: Permite el inicio de sesión de los usuarios.
      requestBody:
        content:
          'application/json':
             schema:
              type: array
              items:
                properties:
                  mail:
                    type: string
                    example: freddiemercury@email.com
                  password:
                    type: string
                    example: freddymercurie123
      responses:
        200:
          description: Login correcto.
          content:
            'application/json':
              schema:
                type: object
                example: {
                          "token": "7WK5T79u5mIzjIXXi2oI9Fglmgivv7RAJ7izyj9tUyQ",
                          "status": "login"
                        }
        400:
          description: Contraseña invalida.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "Password incorrect"}
        404:
          description: Usuario inexistente.
          content:
            'application/json':
              schema:
                type: object
                example: {"status": "Usuario no encontrado"}
  /auth/register:
    post:
      tags:
        - Usuarios
      summary: Crear usuario.
      description: Permite la creación de nuevos usuarios.
      requestBody:
        content:
          'application/json':
             schema:
              type: array
              items:
                properties:
                  user_name:
                    type: string
                    example: Freddie
                  password:
                    type: string
                    example: Freddie123.
                  if_admin:
                    type: string
                    example: si
                  full_name:
                    type: string
                    example: Freddie Mercury
                  phone:
                    type: number
                    example: 3135324587
                  mail: 
                    type: string
                    example: freddy123@gmail.com
                  address:
                    type: string
                    example: 'diagonal 20c # 10a - 98'
      responses:
        201:
          description: Registro exitoso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "register"}
        400:
          description: Mail en uso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "usuario existente"}
        406:
          description: Contraseña o mail invalido.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "contraseña invalida"}
        422:
          description: Falta de alguna propiedad.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "Error, no se envio el atributo user_name"}
  /perfil:
    get:
      tags:
        - Usuarios
      summary: Datos de usuario.
      description: Trae todos los datos del usuario activo.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      responses:
          200:
            description: Operacion exitosa.
            content:
              'application/json':
                schema:
                  type: object
                  example: {'data':{
                                  "id": 1,
                                  "user_name": "andrea",
                                  "password": "Andrea123.",
                                  "if_admin": 1,
                                  "full_name": "andrea perez",
                                  "phone": 3135324587,
                                  "mail": "andrea@gmail.com",
                                  "address": "diagonal 20c # 10a - 98"
                              }}
          404:
            description: Operación no permitida.
            content:
              'application/json':
                schema:
                  type: object
                  example: {"msg": "error"}
    put:
      tags:
        - Usuarios
      summary: Edita datos de usuario.
      description: Permite la edición de los datos del usuario activo.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      requestBody:
        content:
          'application/json':
             schema:
              type: array
              items:
                properties:
                  user_name:
                    type: string
                    example: Freddie
                  password:
                    type: string
                    example: Freddie123.
                  full_name:
                    type: string
                    example: Freddie Mercury
                  phone:
                    type: number
                    example: 3135324587
                  mail: 
                    type: string
                    example: freddy123@gmail.com
                  address:
                    type: string
                    example: 'diagonal 20c # 10a - 98'
      responses:
        201:
          description: Actualización exitosa.
          content:
            'application/json':
              schema:
                type: object
                example: {"data": "sucessfull"}
        400:
          description: Mail en uso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "mail en uso"}
        406:
          description: Contraseña o mail invalido.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "contraseña invalida"}
        422:
          description: Falta de alguna propiedad.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "Error, no se envio el atributo user_name"}
    delete:
      tags:
        - Usuarios
      summary: Eliminar usuarios.
      description: Permite eliminar el usuario activo.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      responses:
        200:
          description: operacion exitosa
          content:
            'application/json':
              schema:
                type: object
                example: {"status": "delete sucessfull"}
  /pedidos:
    get:
      tags:
        - Pedidos
      summary: Todos los pedidos.
      description: Obtiene lista de todos los pedidos, el usuario vera los pedidos realizados y el administrador podra ver todos los pedidos de todos los usuarios.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      responses:
        200:
          description: Operación exitosa
          content:
            'aplication/json':
              schema:
                type: array
                example: {"data": [{
                                "id": 1,
                                "user": "andrea lopez",
                                "products": "Pescado",
                                "amount": 1,
                                "phone": 3135324587,
                                "mail": "andrea@gmail.com",
                                "address": "diagonal 20c # 10a - 98",
                                "status": "NUEVO"
                            }],
                          "status": "pedidos encontrados"}
                
        404:
          description: No hay pedidos registrados
          content:
            'aplication/json':
              schema:
                type: array
                example: {"status": "no hay pedidos"}
  /pedidos/buscar/:id:
    get:
      tags:
        - Pedidos
      summary: Buscar un pedido.
      description: Permite buscar una orden por su id.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      responses:
        200:
          description: Operación exitosa
          content:
            'aplication/json':
              schema:
                type: array
                example: {"data": [{
                                "id": 1,
                                "user": "andrea lopez",
                                "products": "Pescado",
                                "amount": 1,
                                "phone": 3135324587,
                                "mail": "andrea@gmail.com",
                                "address": "diagonal 20c # 10a - 98",
                                "status": "NUEVO"
                            }],
                          "status": "pedidos encontrados"}
        400:
          description: Ocurrio un error en el proceso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "error"}
        403:
          description: Usuario no autorizado.
          content:
            'application/json':
                schema:
                  type: object
                  example: {"msg": "Unauthorized"}
        404:
          description: No hay pedidos registrados
          content:
            'aplication/json':
              schema:
                type: array
                example: {"status": "no hay pedidos"}
  /pedidos/nuevoPedido:
    post:
      tags:
        - Pedidos
      summary: Agregar nuevo pedido.
      description: Permite agregar un nuevo pedido.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      requestBody:
        content:
          'application/json':
            schema:
              type: array
              items:
                properties:
                  id_products:
                    type: number
                    example: 1
                  amount:
                    type: number
                    example: 1
      responses:
        200:
          description: Se añadio correctamente.
          content:
            'application/json':
              schema:
                type: object
                example: {"status": "pedidos hecho"}
        400:
          description: Ocurrio un error en el proceso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "error"}
  /pedidos/editarPedido:
    put:
      tags:
        - Pedidos
      summary: Editar pedido.
      description: Permite al usuario editar su pedido.
      requestBody:
        content:
          'application/json':
            schema:
              type: array
              items:
                properties:
                  id:
                    type: number
                    example: 1
                  id_products:
                    type: number
                    example: 1
                  amount:
                    type: number
                    example: 1
      responses:
        200:
          description: Se edito correctamente.
          content:
            'application/json':
              schema:
                type: object
                example: {"data": "sucessfull"}
        400:
          description: Ocurrio un error en el proceso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "error"}
  /pedidos/editarEstado:
    put:
      tags:
        - Pedidos
      summary: Editar estado.
      description: Permite al administrador editar el estado de un pedido.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      requestBody:
        content:
          'application/json':
            schema:
              type: array
              items:
                properties:
                  id:
                    type: number
                    example: 1
                  id_status:
                    type: number
                    example: 1
      responses:
        200:
          description: Se edito correctamente.
          content:
            'application/json':
              schema:
                type: object
                example: {"status": "status actualizado"}
        400:
          description: Ocurrio un error en el proceso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "error"}
        403:
          description: Usuario no autorizado.
          content:
            'application/json':
                schema:
                  type: object
                  example: {"msg": "Unauthorized"}
  /pedidos/:id:
    delete:
      tags:
        - Pedidos
      summary: Eliminar pedido.
      description: Permite eliminar un pedido.
      responses:
        200:
          description: Se elimino correctamente.
          content:
            'application/json':
              schema:
                type: object
                example: {"status": "delete sucessfull"}
        400:
          description: Ocurrio un error en el proceso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "error"}
  /platos:
    get:
      tags:
        - Platos
      summary: Platos disponibles.
      description: Trae todos los platos disponibles en la base de datos.
      responses:
          200:
            description: Operacion exitosa.
            content:
              'application/json':
                schema:
                  type: object
                  example: {'data':[
                                    {
                                        "id": 1,
                                        "name": "Pescado",
                                        "price": 20000,
                                        "img_url": "https://www.google.com/search?q=pescado&sxsrf=ALeKk003eUrXArNY4CaRBJa36l0NU3z67w:1623858334195&source=lnms&tbm=isch&sa=X&ved=2ahUKEwir6rLZv5zxAhX-RjABHVFpBqkQ_AUoAXoECAIQAw#imgrc=yIVUX2g-MfLEFM",
                                        "description": "Filete de Robalo a La plancha\r\nAcompa?ado de Arroz blanco, patacones y ensalada."
                                    },
                                    {
                                        "id": 2,
                                        "name": "Pollo frito",
                                        "price": 15000,
                                        "img_url": "https://www.google.com/search?q=pollo+frito&sxsrf=ALeKk00W_ntLJo8ckXtaEQ-a-sUGhy7M9w:1623858462407&source=lnms&tbm=isch&sa=X&ved=2ahUKEwiZmMSWwJzxAhX7SzABHUubBsUQ_AUoAXoECAIQAw&biw=1918&bih=1009#imgrc=TUcr-_J-GeKMIM",
                                        "description": "Pollo frito"
                                    }
                                  ],
                            "status": "platos encontrados"}
          404:
            description: Platos no encontrados.
            content:
              'application/json':
                schema:
                  type: object
                  example: {status: "no hay platos"}
  /platos/buscar:
    get:
      tags:
        - Platos
      summary: Buscar plato.
      description: Permite buscar plato por cualquiero propiedad.
      parameters:
      - name: param
        in: query
        description: Propiedad a filtrar.
        required: true
        example: price
        schema:  
          type: string
      - name: valor
        in: query
        description: Valor a buscar.
        required: true
        example: 20000
        schema:  
          type: string
      responses:
          200:
            description: Operacion exitosa.
            content:
              'application/json':
                schema:
                  type: object
                  example: {'data':[
                                    {
                                        "id": 1,
                                        "name": "Pescado",
                                        "price": 20000,
                                        "img_url": "https://www.google.com/search?q=pescado&sxsrf=ALeKk003eUrXArNY4CaRBJa36l0NU3z67w:1623858334195&source=lnms&tbm=isch&sa=X&ved=2ahUKEwir6rLZv5zxAhX-RjABHVFpBqkQ_AUoAXoECAIQAw#imgrc=yIVUX2g-MfLEFM",
                                        "description": "Filete de Robalo a La plancha\r\nAcompa?ado de Arroz blanco, patacones y ensalada."
                                    },
                                  ],
                            "status": "platos encontrados"}
          404:
            description: Platos no encontrados.
            content:
              'application/json':
                schema:
                  type: object
                  example: {status: "no hay platos"}
  /platos/nuevoPlato:
    post:
      tags:
      - Platos
      summary: Agregar plato.
      description: Añade platos a la base de datos.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      requestBody:
        content:
          'application/json':
            schema:
              type: array
              items:
                properties:
                  name:
                    type: string
                    example: Frijoles
                  price:
                    type: number
                    example: 18000
                  img_url:
                    type: string
                    example: https://www.google.com/search?q=frijoles&sxsrf=ALeKk03OkdRZhlPpDuqu8Lu46kDWYHocYA:1623863618324&source=lnms&tbm=isch&sa=X&ved=2ahUKEwjc0oix05zxAhXpTTABHS5KATwQ_AUoAXoECAEQAw#imgrc=tHb9PZkpDVfcNM
                  description:
                    type: string
                    example: frijoles con arroz, ensalada, platano y gaseosa
      responses:
        200:
          description: Se añadio correctamente.
          content:
            'application/json':
              schema:
                type: object
                example: {"status": "Sucessfull"}
        400:
          description: Ocurrio un error en el proceso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "error"}
        403:
          description: Usuario no autorizado.
          content:
            'application/json':
                schema:
                  type: object
                  example: {"msg": "Unauthorized"}
        422:
          description: Falta alguna propiedad.
          content:
            'application/json':
              schema:
                type: object
                example: { "msg": "Error, no se envio el atributo name"}
  /platos/:id:
    delete:
      tags:
        - Platos
      summary: Eliminar plato.
      description: Permite eliminar un plato por su id.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      responses:
        200:
          description: Plato eliminado correctamente.
          content:
            'application/json':
              schema:
                type: object
                example: {'status': "delete sucessfull"}
        403:
          description: Usuario no autorizado.
          content:
            'application/json':
                schema:
                  type: object
                  example: {"msg": "Unauthorized"}
        400:
          description: Error al eliminar plato.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "error"}
    put:
      tags:
        - Platos
      summary: Editar plato.
      description: Permite editar un plato por su id.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      requestBody:
        content:
          'application/json':
            schema:
              type: array
              items:
                properties:
                  name:
                    type: string
                    example: Frijoles
                  price:
                    type: number
                    example: 18000
                  img_url:
                    type: string
                    example: https://www.google.com/search?q=frijoles&sxsrf=ALeKk03OkdRZhlPpDuqu8Lu46kDWYHocYA:1623863618324&source=lnms&tbm=isch&sa=X&ved=2ahUKEwjc0oix05zxAhXpTTABHS5KATwQ_AUoAXoECAEQAw#imgrc=tHb9PZkpDVfcNM
                  description:
                    type: string
                    example: frijoles con arroz, ensalada, platano y gaseosa
      responses:
        200:
          description: Plato editado correctamente.
          content:
            'application/json':
              schema:
                type: object
                example: {"status": "Sucessfull"}
        400:
          description: Ocurrio un error en el proceso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "error"}
        403:
          description: Usuario no autorizado.
          content:
            'application/json':
                schema:
                  type: object
                  example: {"msg": "Unauthorized"}
        422:
          description: Falta alguna propiedad.
          content:
            'application/json':
              schema:
                type: object
                example: { "msg": "Error, no se envio el atributo name"}          