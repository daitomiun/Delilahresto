openapi: 3.0.0

info:
  title: Delilah Resto
  description: API para pedidos de comida deliciosa. Como cliente, podras registrarte, ver el listado de nuestros productos y realizar una orden. Los administradores del restaurante tienen la posibilidad de recibir pedidos y actualizarlos.
  version: 1.0.0
  contact:
    name: Brigite Romero / mateo rodriguez
    email: mateo.rodriguez.fierro@gmail.com 
    

servers:
  - url: http://localhost
    description: ServidorLocal
    variables:
      port:
        default: '3006'
  - url: https://delilahresto.com
    description: produccion
  - url: https://dev.delilahResto.com
    description: staging
tags:
  - name: pedidos
    description: pedidos de los usuarios y admin
  - name: productos
    description: productos de la base de datos
  - name: Usuarios
    description: Endpoints para el manejo de información de clientes y administradores.

paths:
  /auth/login:
    post:
      tags:
        - Usuarios
      summary: Login de usuarios.
      description: Permite el inicio de sesión de los usuarios.
      requestBody:
        content:
          'application/json':
             schema:
              type: array
              items:
                properties:
                  username:
                    type: string
                    example: freddiemercury@email.com
                  password:
                    type: string
                    example: freddymercurie123
      responses:
        200:
          description: Login correcto.
          content:
            'application/json':
              schema:
                type: object
                example: {
                          "token": "7WK5T79u5mIzjIXXi2oI9Fglmgivv7RAJ7izyj9tUyQ",
                          "status": "login"
                        }
        400:
          description: Contraseña invalida.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "Password incorrect"}
        404:
          description: Usuario inexistente.
          content:
            'application/json':
              schema:
                type: object
                example: {"status": "Usuario no encontrado"}
      
  /auth/register:
    post:
      tags:
        - Usuarios
      summary: Crear usuario.
      description: Permite la creación de nuevos usuarios.
      requestBody:
        content:
          'application/json':
             schema:
              type: array
              items:
                properties:
                  user_name:
                    type: string
                    example: Freddie
                  password:
                    type: string
                    example: Freddie123.
                  if_admin:
                    type: string
                    example: si
                  full_name:
                    type: string
                    example: Freddie Mercury
                  phone:
                    type: number
                    example: 3135324587
                  mail: 
                    type: string
                    example: freddy123@gmail.com
                  address:
                    type: string
                    example: 'diagonal 20c # 10a - 98'
      responses:
        201:
          description: Registro exitoso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "register"}
        400:
          description: Mail en uso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "usuario existente"}
        406:
          description: Contraseña o mail invalido.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "contraseña invalida"}
        422:
          description: Falta de alguna propiedad.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "Error, no se envio el atributo user_name"}
      
  /perfil:
    get:
      tags:
        - Usuarios
      summary: Datos de usuario.
      description: Trae todos los datos del usuario activo.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      responses:
          200:
            description: Operacion exitosa.
            content:
              'application/json':
                schema:
                  type: object
                  example: {'data':{
                                  "id": 1,
                                  "user_name": "andrea",
                                  "password": "Andrea123.",
                                  "if_admin": 1,
                                  "full_name": "andrea perez",
                                  "phone": 3135324587,
                                  "mail": "andrea@gmail.com",
                                  "address": "diagonal 20c # 10a - 98"
                              }}
          404:
            description: Operación no permitida.
            content:
              'application/json':
                schema:
                  type: object
                  example: {"msg": "error"}
    put:
      tags:
        - Usuarios
      summary: Edita datos de usuario.
      description: Permite la edición de los datos del usuario activo.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      requestBody:
        content:
          'application/json':
             schema:
              type: array
              items:
                properties:
                  user_name:
                    type: string
                    example: Freddie
                  password:
                    type: string
                    example: Freddie123.
                  full_name:
                    type: string
                    example: Freddie Mercury
                  phone:
                    type: number
                    example: 3135324587
                  mail: 
                    type: string
                    example: freddy123@gmail.com
                  address:
                    type: string
                    example: 'diagonal 20c # 10a - 98'
      responses:
        201:
          description: Actualización exitosa.
          content:
            'application/json':
              schema:
                type: object
                example: {"data": "sucessfull"}
        400:
          description: Mail en uso.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "mail en uso"}
        406:
          description: Contraseña o mail invalido.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "contraseña invalida"}
        422:
          description: Falta de alguna propiedad.
          content:
            'application/json':
              schema:
                type: object
                example: {"msg": "Error, no se envio el atributo user_name"}
    delete:
      tags:
        - Usuarios
      summary: Eliminar usuarios.
      description: Permite eliminar el usuario activo.
      parameters:
      - name: Authorization
        in: header
        description: Token recibido en el Login.
        required: true
        schema:  
          type: string
      responses:
        200:
          description: operacion exitosa
          content:
            'application/json':
              schema:
                type: object
                example: {"status": "delete sucessfull"}
  /pedidos:
    get:
      tags:
        - pedidos
      description: obtiene lista de productos
      responses:
        201:
          description: succes post
          content:
            'aplication/json':
              schema:
                type: array
                items:
                  $ref: '#'
        400:
          description: no permitido/ encontrado
          content:
            'aplication/json':
              schema:
                type: array
                items:
                  $ref: '#'
    put:
      tags:
        - pedidos
      description: añade productos al usuario
      responses:
        200:
          description: succes request
          content:
             'aplication/json':
              schema:
                type: array
                items:
                  $ref: '#'
        400:
            description: no permitido/ encontrado
            content:
              'aplication/json':
                schema:
                  type: array
                  items:
                    $ref: '#'
    delete:
      tags:
        - pedidos
      description: quita productos añadidos del usuarios
      responses:
        200:
          description: deleted succuesfully
          content:
            'aplication/json':
                schema:
                  type: array
                  items:
                    $ref: '#'
        400:
          description: no quito productos/error
          content:
              'aplication/json':
                  schema:
                    type: array
                    items:
                      $ref: '#'   
  /pedidos/:transaccion-hecha:
    post:
      tags:
        - pedidos
      description: se tomara todo lo que el usuario pidio, y se guardara en la bd
      responses:
        200:
          description:  se ha recibido tu pedido
  # /usuarios/favoritos:
  #   get:
  #     tags:
  #       - usuarios
  #     summary: Obtener favoritos
  #     description: obtiene la lista de favoritos
  #     operationId: ObtenerFavoritos
  #     responses:
  #       200:
  #         description: succes request
  #         content:
  #           'application/json':
  #             schema:
  #               type: array
  #               items:
  #                 properties:
  #                   id:
  #                     type: integer
  #                     example: 10
  #                   plato:
  #                     type: string
  #                     example: Bagel de salmón
  #                   restaurante:
  #                     type: string
  #                     example: El rincón del pacifico
  #                   precio:
  #                     type: integer
  #                     example: 15000
  #       404:
  #         description: no favorites
  #         content:
  #           'application/json':
  #             schema:
  #               type: object
  #               example: {'message': no favorites}
  #   post:
  #     tags:
  #       - usuarios
  #     summary: Agregar favoritos
  #     description: Agregar a la lista de favoritos
  #     operationId: AgregarFavoritos
  #     responses:
  #       201:
  #         description: succes request
  #         content:
  #           'application/json':
  #             schema:
  #               type: object
  #               example: {'mesagge': platos ya recibidos del usuario}
  #       400:
  #         description: invalid syntax
  #         content:
  #           'application/json':
  #             schema:
  #               type: object
  #               example: {'mesagge': felicitaciones por haber hecho tu primer pedido!}
  #       404:
  #         description: non-existent plate
  #         content:
  #           'application/json':
  #             schema:
  #               type: object
  #               example: {'mesagge': platos no recibidos del usuario por complicaciones}
  /productos:
      get:
        tags:
          - productos
        description: toma los datos de los platos en la BD
        responses:
            200:
              description:  se tomaron los datos del plato
              content:
                'application/json':
                  schema:
                    type: object
                    example: {'mesagge': platos recibidos}
            404:
                description:  hubo complicaciones al tomar los platos
                content:
                  'application/json':
                    schema:
                      type: object
                      example: {'mesagge': platos no encontrados}
      delete:
              tags:
                - productos
              description: borra platos en la base de datos
              responses:
                  200:
                    description:  se borro el plato
                    content:
                      'application/json':
                        schema:
                          type: object
                          example: {'mesagge': platos borrados}
                  400:
                          description:  no se borraron los datos por complicaciones
                          content:
                            'application/json':
                              schema:
                                type: object
                                example: {'mesagge': platos no borrados}
                  404:
                      description:  hubo complicaciones al borrar los platos
                      content:
                        'application/json':
                          schema:
                            type: object
                            example: {'mesagge': platos no encontrados}
      post:
              tags:
                - productos
              description: añade platos en la base de datos
              responses:
                  200:
                    description:  se añadio el plato
                    content:
                      'application/json':
                        schema:
                          type: object
                          example: {'mesagge': platos borrados}
                  400:
                          description:  no se añadieron los datos por complicaciones
                          content:
                            'application/json':
                              schema:
                                type: object
                                example: {'mesagge': platos no añadidos}
              requestBody:
                content:
                  'application/json':
                      schema:
                        type: array
                        items:
                          properties:
                            id:
                              type: integer
                              example: 10
                            plato:
                              type: string
                              example: Bagel de salmón
                            restaurante:
                              type: string
                              example: El rincón del pacifico
                            precio:
                              type: integer
                              example: 15000