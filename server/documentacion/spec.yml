openapi: 3.0.0

info:
  title: Delilah Resto
  description: API para pedidos de comida deliciosa. Como cliente, podras registrarte, ver el listado de nuestros productos y realizar una orden. Los administradores del restaurante tienen la posibilidad de recibir pedidos y actualizarlos.
  version: 1.0.0
  contact:
    name: Brigite Romero / mateo rodriguez
    email: mateo.rodriguez.fierro@gmail.com 
    

servers:
  - url: http://localhost:3300
    description: ServidorLocal
    variables:
      port:
        default: '3300'
  - url: https://delilahresto.com
    description: produccion
  - url: https://dev.delilahResto.com
    description: staging
tags:
  - name: pedidos
    description: pedidos de los usuarios y admin
  - name: productos
    description: productos de la base de datos
  - name: usuarios
    description: admin y usuario

paths:
  
  /usuarios:
    get:
      tags:
        - usuarios
      summary: muestra datos de usuario o que el admin muestra lista de usuarios
      operationId: tomarInfo
      responses:
        200:
          description: exito en la toma de datos!
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': Exito en la toma de datos} 
        401:
          description: no autorizado
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': No autorizado}
        404:
          description: no encontrado
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': No encontrado}
    put:
      tags:
        - usuarios
      summary: edita datos activos del usuario
      responses:
        200:
          description: operacion exitosa
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': Operacion exitosa} 
        400:
          description: contraseña/usuario invalidos
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': Contraseña/usuario invalidos}
        404:
          description: no encontrado
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': No encontrado}
    delete:
      tags:
        - usuarios
      summary: quita usuarios activos o no activos
      responses:
        200:
          description: operacion exitosa
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': Operacion exitosa} 
        404:
          description: no encontrado
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': No encontrado}
        400:
          description: usuario no pudo quitar su cuenta
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': Usuario no pudo quitar su cuenta}
  /usuarios/login:
    post:
      tags:
        - usuario
      summary: Dejará entrar al usuario
      operationId: inicioId
      responses:
        200:
          description: correct login
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': login successfully}
        400:
          description: invalid syntax
          content:
            'application/json':
              schema:
                type: object
                example: {'message': invalid syntax}
        404:
          description: non-existent user
          content:
            'application/json':
              schema:
                type: object
                example: {'message': non-existent user}
      requestBody:
        content:
          'application/json':
             schema:
              type: array
              items:
                properties:
                  usuario:
                    type: string
                    example: freddiemercury@email.com
                  contraseña:
                    type: string
                    example: freddymercurie123
  /usuarios/register:
    post:
      tags:
        - usuarios
      summary: Crear usuario
      description: crearlos enla BD cuando se registren
      operationId: CrearUsuario
      responses:
        201:
          description: succes post
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': user created successfully}
        400:
          description: invalid syntax
          content:
            'application/json':
              schema:
                type: object
                example: {'message': invalid syntax}
      requestBody:
        content:
          'application/json':
             schema:
              type: array
              items:
                properties:
                  usuario:
                    type: string
                    example: queen_freddie
                  nombre y apellido:
                    type: string
                    example: Freddie Mercury
                  email:
                    type: string
                    example: freddiemercury@email.com
                  telefono:
                    type: integer
                    example: +44 7712345678
                  direccion:
                    type: string
                    example: 1 Logan PIKensington, London W8 6DE
                  contraseña: 
                    type: string
                    example: freddymercurie123
  /usuarios/:nombreDeUsuario:
    get:
      tags:
        - usuarios
      summary: tomar nombres de usuarios (admin)
      operationId: tomarNombres
      parameters:
      - name: username
        in: path
        description: se obtendra los nombre en la bd
        required: true
        schema:  
          type: string
      responses:
          200:
            description: operacion exitosa
          404:
            description: no permitido
  
  /productos:
    get:
      description: obtiene lista de productos
      responses:
        200:
          description: succes request
          content:
            'aplication/json':
              schema:
                type: array
                items:
                  $ref: '#'
  /usuarios/favoritos:
    get:
      tags:
        - usuarios
      summary: Obtener favoritos
      description: obtiene la lista de favoritos
      operationId: ObtenerFavoritos
      responses:
        200:
          description: succes request
          content:
            'application/json':
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 10
                    plato:
                      type: string
                      example: Bagel de salmón
                    restaurante:
                      type: string
                      example: El rincón del pacifico
                    precio:
                      type: integer
                      example: 15000
        404:
          description: no favorites
          content:
            'application/json':
              schema:
                type: object
                example: {'message': no favorites}
    post:
      tags:
        - usuarios
      summary: Agregar favoritos
      description: Agregar a la lista de favoritos
      operationId: AgregarFavoritos
      responses:
        201:
          description: succes request
          content:
            'application/json':
              schema:
                type: object
                example: {'mesagge': succes request}
        400:
          description: invalid syntax
          content:
            'application/json':
              schema:
                type: object
                example: {'message': invalid syntax}
        404:
          description: non-existent plate
          content:
            'application/json':
              schema:
                type: object
                example: {'message': non-existent plate}
      requestBody:
        content:
          'application/json':
             schema:
              type: array
              items:
                properties:
                  id:
                    type: integer
                    example: 10
                  plato:
                    type: string
                    example: Bagel de salmón
                  restaurante:
                    type: string
                    example: El rincón del pacifico
                  precio:
                    type: integer
                    example: 15000      
